package com.kartikeya.order.controller;


	
	
	import static org.mockito.Mockito.*;

	import java.util.ArrayList;
	import java.util.List;

	import org.junit.jupiter.api.BeforeEach;
	import org.junit.jupiter.api.Test;
	import org.mockito.InjectMocks;
	import org.mockito.Mock;
	import org.mockito.MockitoAnnotations;
	import org.springframework.http.HttpStatus;
	import org.springframework.http.ResponseEntity;

	import com.kartikeya.order.entity.Order;
	import com.kartikeya.order.exception.NoProperDataException;
	import com.kartikeya.order.exception.OrderNotFoundException;
	import com.kartikeya.order.service.OrderServiceImpl;
	import com.kartikeya.order.service.SequenceGeneratorService;

	public class OrderControllerTest {

	    @InjectMocks
	    private OrderController orderController;

	    @Mock
	    private OrderServiceImpl orderService;

	    @Mock
	    private SequenceGeneratorService sequenceGeneratorService;

	    @BeforeEach
	    public void setup() {
	        MockitoAnnotations.initMocks(this);
	    }

	    @Test
	    public void testGetAllOrders() throws OrderNotFoundException {
	        List<Order> orders = new ArrayList<>();
	        orders.add(new Order(1,"09-09-2005", "Order190", 100.00,"tomato", null));
	       orders.add(new Order(2, "Order2", null, 200.0, null, null));

	        when(orderService.getAllOrders()).thenReturn(orders);

	        ResponseEntity<List<Order>> response = orderController.getAllProduct();

	        assert (response.getStatusCode().equals(HttpStatus.OK));
	        assert (response.getBody().size() == 2);
	    }

	    @Test
	    public void testGetOrderById() throws OrderNotFoundException {
	        int orderId = 1;
	        Order order = new Order(orderId, "Order1", null, 100.0, null, null);

	        when(orderService.getOrderById(orderId)).thenReturn(order);

	        ResponseEntity<Order> response = orderController.getOrderById(orderId);

	        assert (response.getStatusCode().equals(HttpStatus.OK));
	        assert (response.getBody().getBookingOrderId() == orderId);
	    }

	    @Test
	    public void testAddOrder() throws NoProperDataException {
	        Order order = new Order(1, "Order1", null, 100.0, null, null);

	        when(sequenceGeneratorService.getSequenceNumberForOrders(any())).thenReturn(1);
	        doNothing().when(orderService).addOrders(order);

	        ResponseEntity<Order> response = orderController.addOrders(order);

	        assert (response.getStatusCode().equals(HttpStatus.CREATED));
	    }

	    @Test
	    public void testDeleteOrder() throws OrderNotFoundException {
	        int orderId = 1;

	        doNothing().when(orderService).deleteOrder(orderId);

	        ResponseEntity<String> response = orderController.deleteOrder(orderId);

	        assert (response.getStatusCode().equals(HttpStatus.OK));
	    }
	}



